// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Numbers struct {
	Values               []float64 `protobuf:"fixed64,1,rep,packed,name=Values,proto3" json:"Values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Numbers) Reset()         { *m = Numbers{} }
func (m *Numbers) String() string { return proto.CompactTextString(m) }
func (*Numbers) ProtoMessage()    {}
func (*Numbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *Numbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Numbers.Unmarshal(m, b)
}
func (m *Numbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Numbers.Marshal(b, m, deterministic)
}
func (m *Numbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Numbers.Merge(m, src)
}
func (m *Numbers) XXX_Size() int {
	return xxx_messageInfo_Numbers.Size(m)
}
func (m *Numbers) XXX_DiscardUnknown() {
	xxx_messageInfo_Numbers.DiscardUnknown(m)
}

var xxx_messageInfo_Numbers proto.InternalMessageInfo

func (m *Numbers) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Number struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Number) Reset()         { *m = Number{} }
func (m *Number) String() string { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()    {}
func (*Number) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *Number) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Number.Unmarshal(m, b)
}
func (m *Number) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Number.Marshal(b, m, deterministic)
}
func (m *Number) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Number.Merge(m, src)
}
func (m *Number) XXX_Size() int {
	return xxx_messageInfo_Number.Size(m)
}
func (m *Number) XXX_DiscardUnknown() {
	xxx_messageInfo_Number.DiscardUnknown(m)
}

var xxx_messageInfo_Number proto.InternalMessageInfo

func (m *Number) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Numbers)(nil), "v1.Numbers")
	proto.RegisterType((*Number)(nil), "v1.Number")
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf) }

var fileDescriptor_c686ea360062a8cf = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33,
	0x54, 0x52, 0xe4, 0x62, 0xf7, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0x2a, 0x16, 0x12, 0xe3, 0x62, 0x0b,
	0x4b, 0xcc, 0x29, 0x4d, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd6, 0x60, 0x0c, 0x82, 0xf2, 0x94, 0xe4,
	0xb8, 0xd8, 0x20, 0x4a, 0x84, 0x44, 0xb8, 0x58, 0xcb, 0x40, 0x62, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x8c, 0x41, 0x10, 0x8e, 0xd1, 0x25, 0x26, 0x2e, 0x2e, 0x67, 0xb8, 0xd9, 0x42, 0x0a, 0x5c, 0xcc,
	0x8e, 0x29, 0x29, 0x42, 0xdc, 0x7a, 0x65, 0x86, 0x7a, 0x50, 0xa3, 0xa5, 0xb8, 0x10, 0x1c, 0x25,
	0x06, 0x21, 0x75, 0x2e, 0x4e, 0xc7, 0x94, 0x94, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x21, 0x24,
	0x29, 0x54, 0x65, 0x1a, 0x8c, 0x42, 0xaa, 0x5c, 0x1c, 0xc1, 0xa5, 0x49, 0x25, 0x45, 0x89, 0xc9,
	0x25, 0xf8, 0xcc, 0xd3, 0xe1, 0xe2, 0x83, 0x29, 0x23, 0xce, 0x50, 0xdf, 0xd2, 0x9c, 0x92, 0xcc,
	0x82, 0x9c, 0x4a, 0x02, 0x86, 0xc2, 0x94, 0x11, 0x61, 0xa8, 0x32, 0x17, 0x9b, 0x4b, 0x66, 0x59,
	0x66, 0x4a, 0x2a, 0x3e, 0x23, 0xb5, 0xb8, 0x78, 0x20, 0x8a, 0x08, 0x1b, 0x98, 0xc4, 0x06, 0x8e,
	0x22, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x55, 0x47, 0x5c, 0xb6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	Add(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error)
	AddStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_AddStreamClient, error)
	Subtract(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error)
	SubtractStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_SubtractStreamClient, error)
	Multiply(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error)
	MultiplyStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_MultiplyStreamClient, error)
	Divide(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error)
	DivideStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_DivideStreamClient, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Add(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/v1.Calculator/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) AddStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_AddStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/v1.Calculator/AddStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorAddStreamClient{stream}
	return x, nil
}

type Calculator_AddStreamClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type calculatorAddStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorAddStreamClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorAddStreamClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) Subtract(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/v1.Calculator/Subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SubtractStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_SubtractStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[1], "/v1.Calculator/SubtractStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorSubtractStreamClient{stream}
	return x, nil
}

type Calculator_SubtractStreamClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type calculatorSubtractStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorSubtractStreamClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorSubtractStreamClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) Multiply(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/v1.Calculator/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) MultiplyStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_MultiplyStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[2], "/v1.Calculator/MultiplyStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorMultiplyStreamClient{stream}
	return x, nil
}

type Calculator_MultiplyStreamClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type calculatorMultiplyStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorMultiplyStreamClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorMultiplyStreamClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) Divide(ctx context.Context, in *Numbers, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/v1.Calculator/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) DivideStream(ctx context.Context, opts ...grpc.CallOption) (Calculator_DivideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[3], "/v1.Calculator/DivideStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorDivideStreamClient{stream}
	return x, nil
}

type Calculator_DivideStreamClient interface {
	Send(*Number) error
	CloseAndRecv() (*Number, error)
	grpc.ClientStream
}

type calculatorDivideStreamClient struct {
	grpc.ClientStream
}

func (x *calculatorDivideStreamClient) Send(m *Number) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorDivideStreamClient) CloseAndRecv() (*Number, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	Add(context.Context, *Numbers) (*Number, error)
	AddStream(Calculator_AddStreamServer) error
	Subtract(context.Context, *Numbers) (*Number, error)
	SubtractStream(Calculator_SubtractStreamServer) error
	Multiply(context.Context, *Numbers) (*Number, error)
	MultiplyStream(Calculator_MultiplyStreamServer) error
	Divide(context.Context, *Numbers) (*Number, error)
	DivideStream(Calculator_DivideStreamServer) error
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Calculator/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Add(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_AddStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).AddStream(&calculatorAddStreamServer{stream})
}

type Calculator_AddStreamServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type calculatorAddStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorAddStreamServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorAddStreamServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Calculator/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Subtract(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SubtractStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).SubtractStream(&calculatorSubtractStreamServer{stream})
}

type Calculator_SubtractStreamServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type calculatorSubtractStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorSubtractStreamServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorSubtractStreamServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Calculator/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Multiply(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_MultiplyStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).MultiplyStream(&calculatorMultiplyStreamServer{stream})
}

type Calculator_MultiplyStreamServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type calculatorMultiplyStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorMultiplyStreamServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorMultiplyStreamServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Numbers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Calculator/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Divide(ctx, req.(*Numbers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_DivideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).DivideStream(&calculatorDivideStreamServer{stream})
}

type Calculator_DivideStreamServer interface {
	SendAndClose(*Number) error
	Recv() (*Number, error)
	grpc.ServerStream
}

type calculatorDivideStreamServer struct {
	grpc.ServerStream
}

func (x *calculatorDivideStreamServer) SendAndClose(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorDivideStreamServer) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculator_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _Calculator_Subtract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _Calculator_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Calculator_Divide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddStream",
			Handler:       _Calculator_AddStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubtractStream",
			Handler:       _Calculator_SubtractStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiplyStream",
			Handler:       _Calculator_MultiplyStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DivideStream",
			Handler:       _Calculator_DivideStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
